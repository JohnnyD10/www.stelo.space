#Attempt to represent urls and their functions. To be migrated to better format. 
#format explaination: 
interface = {
  name    : identifier
  method  : http method
  headers : list of headers expected
  path    : domain/path/path/path
  params  : domain/path.../?paramsKey=value
  body    : request's content as json
  return  : Code & Type of data returned
  notes   : additional info
} as

name:
  method, [headers], path, [params]
  body
  return
  - notes

# interfaces:
#need to add authentication APIs

log_in:
  GET, N/A, /v0/token, N/A
  { credentials, permissions }
  200 OK token{}
  
log_out:
  DELETE, Authorization = token, /v0/token, N/A
  N/A
  200 OK
  
register:> create_user

read_users:
  GET, Authorization = token, /v0/users, [$filter="properties=filteredValue", $top=int, $skip=int]
  N/A
  200 OK User[]
  - if the token value is moderator, the returned User object has private field (email, priv Constellations,...)
  - Uncertain of the $filter params, should revise with OData docs
  - Only return $top users from $skip; default is 10, 0
  
update_user:
  PATCH, Authorization = token, /v0/user, $id=int
  { User_properties : new_values }
  200 OK
  - only works if the token relates to same $id or is moderator
  - Uncertains if $id should be in body, should refer to OData
  
create_user:
  POST, N/A, /v0/user, N/A
  { User_properties : new_values }
  201 CREATED new_id, datestamp
  
delete_user:
  DELETE, Authorization = token, /v0/user, $id=int
  N/A
  200 OK
  - only works if the token relates to same $id or is moderator
  - Uncertains if $id should be in body, should refer to OData
  - Cascade delete it's constellations and stars. if a user uses one of these only the author field should change

read_constellations:
update_constellation:
create_constellation:
delete_constellation:

read_stars:
update_star:
create_star:
delete_star:
